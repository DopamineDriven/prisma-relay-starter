generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// User Shape -- note, prisma uses uuid v4 -- uuid will be valid ACROSS all databases -- no conflicts
  id             String     @id @default(uuid())
  name           String?
  email          String     @unique
  email_verified DateTime?
  image          String?
  role           Role       @default(USER)
  department     Department @default(UNASSIGNED)
  profile        Profile?   @relation("UserProfile")
  accounts       Account[]  @relation("Accounts")
  entries        Entry[]    @relation("Author")
  sessions       Session[]  @relation("Sessions")
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  memberSince DateTime  @default(now())
  coverImage  String?
  dob         DateTime? @db.Date
  phoneNumber String?
  bio         String?
  user        User      @relation("UserProfile", fields: [userId], references: [id])
}

model Entry {
  id            String    @id @default(uuid())
  title         String
  published     Boolean   @default(false)
  userId        String    @map("user_id")
  content       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  featuredImage String?
  author        User      @relation("Author", fields: [userId], references: [id])

  @@map("entries")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  scope              String?
  access_token       String?
  expires_at         Int?
  id_token           String?
  token_type         String?
  oauth_token        String?
  oauth_token_secret String?
  refresh_token      String?
  session_state      String?
  user               User    @relation("Accounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation("Sessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/// Passwordless login for email providers
model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER     
}

  enum Department {
  UNASSIGNED
  CUSTOMER_SUPPORT
  ENGINEERING
  MEDIA
  DESIGN
  EXECUTIVE
  MEDICAL
  LEGAL
  FINANCE
  MARKETING
  OPERATIONS
  SALES
  HUMAN_RESOURCES
}
